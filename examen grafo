import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Scanner;
import java.util.Stack;
import java.util.Vector;

public class DijkstraAlgorithm {
	char[]  nodos; 

    double[][] grafo;  // Matriz de distancias entre nodos

    String  rutaMasCorta;                           // distancia más corta

    int     longitudMasCorta = Integer.MAX_VALUE;   // ruta más corta

     List<Nodo>  listos=null;                        // nodos revisados Dijkstra

 

    

     DijkstraAlgorithm(String serieNodos) {

        nodos = serieNodos.toCharArray();

        grafo = new double[nodos.length][nodos.length];

    }

 

    // asigna el tamaño de la arista entre dos nodos

    public void agregarRuta(char origen, char destino, double d) {

        int n1 = posicionNodo(origen);

        int n2 = posicionNodo(destino);

        grafo[n1][n2]=d;

        grafo[n2][n1]=d;
      
     
     System.out.println(grafo[n1][n2]);
        
    }

 

    

    private int posicionNodo(char nodo) {

        for(int i=0; i<nodos.length; i++) {

            if(nodos[i]==nodo) return i;

        }

        return -1;

    }

     

    // encuentra la ruta más corta desde un nodo origen a un nodo destino

    public String encontrarRutaMinimaDijkstra(char inicio, char fin) {

        // calcula la ruta más corta del inicio a los demás

        encontrarRutaMinimaDijkstra(inicio);

        // recupera el nodo final de la lista de terminados

        Nodo tmp = new Nodo(fin);

        if(!listos.contains(tmp)) {

            System.out.println("Error, nodo no alcanzable");

            return "Bye";

        }

        tmp = listos.get(listos.indexOf(tmp));

        double distancia = tmp.distancia;  

        // crea una pila para almacenar la ruta desde el nodo final al origen

        Stack<Nodo> pila = new Stack<Nodo>();

        while(tmp != null) {

            pila.add(tmp);

            tmp = tmp.procedencia;

        }

        String ruta = "";

        // recorre la pila para armar la ruta en el orden correcto

        while(!pila.isEmpty()) ruta+=(pila.pop().id + " ");

        return distancia + " " + ruta;

    }

 

    // encuentra la ruta más corta desde el nodo inicial a todos los demás

    public void encontrarRutaMinimaDijkstra(char inicio) {

        Queue<Nodo>   cola = new PriorityQueue<Nodo>(); // cola de prioridad

        Nodo            ni = new Nodo(inicio);          // nodo inicial

         

        listos = new LinkedList<Nodo>();// lista de nodos ya revisados

        cola.add(ni);                   // Agregar nodo inicial a la cola de prioridad

        while(!cola.isEmpty()) {        // mientras que la cola no esta vacia

            Nodo tmp = cola.poll();     // saca el primer elemento

            listos.add(tmp);            // lo manda a la lista de terminados

            int p = posicionNodo(tmp.id);   

            for(int j=0; j<grafo[p].length; j++) {  // revisa los nodos hijos del nodo tmp

                if(grafo[p][j]==0) continue;        // si no hay conexión no lo evalua

                if(estaTerminado(j)) continue;      // si ya fue agregado a la lista de terminados

                Nodo nod = new Nodo(nodos[j],tmp.distancia+grafo[p][j],tmp);

                // si no está en la cola de prioridad, lo agrega

                if(!cola.contains(nod)) {

                    cola.add(nod);

                    continue;

                }

                // si ya está en la cola de prioridad actualiza la distancia menor

                for(Nodo x: cola) {

                    // si la distancia en la cola es mayor que la distancia calculada

                    if(x.id==nod.id && x.distancia > nod.distancia) {

                        cola.remove(x); // remueve el nodo de la cola

                        cola.add(nod);  // agrega el nodo con la nueva distancia

                        break;          // no sigue revisando

                    }

                }

            }

        }

    }

 

    // verifica si un nodo ya está en lista de terminados

    public boolean estaTerminado(int j) {

        Nodo tmp = new Nodo(nodos[j]);

        return listos.contains(tmp);

    }

 

    // encontrar la ruta mínima por fuerza bruta

    public void encontrarRutaMinimaFuerzaBruta(char inicio, char fin) {

        int p1 = posicionNodo(inicio);
       

        int p2 = posicionNodo(fin);

        // cola para almacenar cada ruta que está siendo evaluada

        Stack<Integer> resultado = new Stack<Integer>();

        resultado.push(p1);

        recorrerRutas(p1, p2, resultado);

    }

 

    // recorre recursivamente las rutas entre un nodo inicial y un nodo final

    // almacenando en una cola cada nodo visitado

    private void recorrerRutas(int nodoI, int nodoF, Stack<Integer> resultado) {

        // si el nodo inicial es igual al final se evalúa la ruta en revisión

        if(nodoI==nodoF) {
int respuesta1= evaluar(resultado);
            int respuesta = evaluar(resultado);

            if(respuesta < longitudMasCorta) {

                longitudMasCorta = respuesta;

                rutaMasCorta     = "";

                for(int x: resultado) rutaMasCorta+=(nodos[x]+" ");

            }

            return;

        }

        // Si el nodoInicial no es igual al final se crea una lista con todos los nodos

        // adyacentes al nodo inicial que no estén en la ruta en evaluación

        List<Integer> lista = new Vector<Integer>();

        for(int i=0; i<grafo.length;i++) {

            if(grafo[nodoI][i]!=0 && !resultado.contains(i))lista.add(i);

        }

        // se recorren todas las rutas formadas con los nodos adyacentes al inicial

        for(int nodo: lista) {

            resultado.push(nodo);

            recorrerRutas(nodo, nodoF, resultado);

            resultado.pop();

        }

    }

 

    // evaluar la longitud de una ruta

    public int evaluar(Stack<Integer> resultado) {

        int  resp = 0;
            int resp2 = 0;

        int[]   r = new int[resultado.size()];

             int[]   re = new int[resultado.size()];
        int     i = 0;

        for(int x: resultado) r[i++]=x;

        for(i=1; i<r.length; i++) resp+=grafo[r[i]][r[i-1]];
        System.out.println(resp+=grafo[r[i]][r[i-1]]);
        return resp;
             
            
    

        }

    public static void main(String[] args) {

    	DijkstraAlgorithm g = new DijkstraAlgorithm("abcdef");

        g.agregarRuta('a','b', 1.6);

        g.agregarRuta('b','d', 1.7);

        g.agregarRuta('b','c',1.2);

        g.agregarRuta('c','e', 4.3);

        g.agregarRuta('d','e', 2.8);

        g.agregarRuta('f','e', 18);

        g.agregarRuta('a','f', 9.2);

    

        char inicio1 = 'a';

        char fin1    = 'e';
        
      
        

        String respuesta = g.encontrarRutaMinimaDijkstra(inicio1, fin1);
            
        
        

     
        System.out.println("Menu de plazas \na Romblas \nb Alameda \nc Patria \nd Club plaza \ne Plaza mexico \nf Galerias");
        System.out.println("LA distancia corta entre dos vertices y ruta optima de ramblas a plaza mexico: " + respuesta);
             
    }
}

/// clase nodo 
public class Nodo  implements Comparable<Nodo>{
	char id;
    double distancia   = Integer.MAX_VALUE;
    Nodo procedencia = null;
    Nodo(char x, double d, Nodo p) { id=x; distancia=d; procedencia=p; }
    Nodo(char x) { this(x, 0, null); }
    public int compareTo(Nodo tmp) { return   (int) (this.distancia-tmp.distancia); }
    public boolean equals(Object o) {
        Nodo tmp = (Nodo) o;
        if(tmp.id==this.id) return true;
        return false;
    }
	

}



